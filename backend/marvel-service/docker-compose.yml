version: '3.8'

services:
  # Development PostgreSQL
  postgres-dev:
    image: postgres:15-alpine
    container_name: marvel-postgres-dev
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-test:
    image: postgres:15-alpine
    container_name: marvel-postgres-test
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    entrypoint: ["/bin/sh", "-c", "printenv && docker-entrypoint.sh postgres"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: .
    depends_on:
      postgres-dev:
        condition: service_healthy
    environment:
      DB_HOST: postgres-dev
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      TMDB_API_KEY: ${TMDB_API_KEY}
    ports:
      - 3000:3000
    command: sh -c "npm run migration:run && npm run start:prod"

volumes:
  postgres_dev_data:
  postgres_test_data: